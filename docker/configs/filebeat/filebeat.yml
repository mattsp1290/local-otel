filebeat.inputs:
# Monitor OpenTelemetry Collector logs
- type: log
  enabled: true
  paths:
    - /data/logs/*.jsonl
    - /data/logs/*.log
  fields:
    service: otel-collector
    environment: local-development
  fields_under_root: true
  json.keys_under_root: true
  json.add_error_key: true
  multiline.pattern: '^\{'
  multiline.negate: true
  multiline.match: after

# Monitor StatsD logs and metrics
- type: log
  enabled: true
  paths:
    - /data/metrics/statsd*.log
    - /data/metrics/statsd*.json
  fields:
    service: statsd
    environment: local-development
  fields_under_root: true
  json.keys_under_root: true
  json.add_error_key: true

# Monitor application logs (when available)
- type: log
  enabled: true
  paths:
    - /data/logs/canary*.log
    - /data/logs/application*.log
  fields:
    service: canary-api
    environment: local-development
  fields_under_root: true
  multiline.pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2}'
  multiline.negate: true
  multiline.match: after

# Monitor Docker container logs
- type: container
  enabled: true
  paths:
    - '/var/lib/docker/containers/*/*.log'
  processors:
    - add_docker_metadata:
        host: "unix:///var/run/docker.sock"

processors:
# Add timestamp if missing
- timestamp:
    field: '@timestamp'
    layouts:
      - '2006-01-02T15:04:05.000Z'
      - '2006-01-02T15:04:05Z'
      - '2006-01-02 15:04:05'
    test:
      - '2023-05-24T20:05:33.123Z'

# Add hostname and environment metadata
- add_host_metadata:
    when.not.contains.tags: forwarded

# Add process metadata
- add_process_metadata:
    match_pids: ['process.pid', 'process.parent.pid']

# Add correlation IDs for trace/log correlation
- script:
    lang: javascript
    id: add_correlation_id
    source: >
      function process(event) {
        var message = event.Get("message");
        if (message) {
          // Extract trace ID from OpenTelemetry logs
          var traceMatch = message.match(/trace_id[=:]([a-f0-9]{32})/i);
          if (traceMatch) {
            event.Put("trace.id", traceMatch[1]);
          }
          
          // Extract span ID from OpenTelemetry logs
          var spanMatch = message.match(/span_id[=:]([a-f0-9]{16})/i);
          if (spanMatch) {
            event.Put("span.id", spanMatch[1]);
          }
        }
      }

# Add application-specific fields
- script:
    lang: javascript
    id: add_application_fields
    source: >
      function process(event) {
        var message = event.Get("message");
        if (message && event.Get("service") === "canary-api") {
          // Extract endpoint
          var endpointMatch = message.match(/endpoint[=:\s]+([/a-zA-Z0-9_-]+)/i);
          if (endpointMatch) {
            event.Put("canary.endpoint", endpointMatch[1]);
          }
          
          // Extract HTTP method
          var methodMatch = message.match(/method[=:\s]+(GET|POST|PUT|DELETE|PATCH)/i);
          if (methodMatch) {
            event.Put("canary.http_method", methodMatch[1]);
          }
          
          // Extract response status
          var statusMatch = message.match(/status[=:\s]+([0-9]{3})/i);
          if (statusMatch) {
            event.Put("canary.status_code", statusMatch[1]);
          }
        }
      }

# Add performance metrics
- script:
    lang: javascript
    id: add_performance_metrics
    source: >
      function process(event) {
        var now = new Date();
        event.Put("processing.timestamp", now.toISOString());
        
        var message = event.Get("message");
        if (message) {
          event.Put("processing.message_size", message.length);
        }
      }

output.file:
  enabled: true
  path: "/data/processed"
  filename: "filebeat-processed"
  rotate_every_kb: 10000
  number_of_files: 7
  codec.format:
    string: '%{[@timestamp]} %{[service]} %{[log.level]} %{[message]}'

# Console output for debugging (disabled - only one output allowed)
# output.console:
#   enabled: false
#   codec.format:
#     string: '%{[@timestamp]} [%{[service]}] %{[log.level]} %{[message]}'

# Optional: Output to Elasticsearch (disabled by default)
# output.elasticsearch:
#   enabled: false
#   hosts: ["elasticsearch:9200"]
#   index: "canary-logs-%{+yyyy.MM.dd}"

logging.level: info
logging.to_files: true
logging.files:
  path: /data/logs
  name: filebeat
  keepfiles: 7
  permissions: 0644

# Monitoring configuration (disabled for local development)
monitoring:
  enabled: false
  
# HTTP endpoint for health checks
http.enabled: true
http.host: 0.0.0.0
http.port: 5066

# Performance tuning
queue.mem:
  events: 4096
  flush.min_events: 512
  flush.timeout: 1s

# Security settings
ssl.verification_mode: none
