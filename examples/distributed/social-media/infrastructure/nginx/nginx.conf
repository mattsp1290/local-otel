events {
    worker_connections 1024;
}

http {
    # Enable OpenTelemetry module if available
    # load_module modules/ngx_http_opentelemetry_module.so;

    # Logging format with trace IDs
    log_format trace_format '$remote_addr - $remote_user [$time_local] '
                           '"$request" $status $body_bytes_sent '
                           '"$http_referer" "$http_user_agent" '
                           'trace_id=$http_x_trace_id '
                           'span_id=$http_x_span_id '
                           'parent_id=$http_x_parent_id';

    access_log /var/log/nginx/access.log trace_format;
    error_log /var/log/nginx/error.log warn;

    # Upstream services
    upstream auth_service {
        server auth-service:3001;
    }

    upstream user_profile_service {
        server user-profile-service:8000;
    }

    upstream feed_service {
        server feed-service:8080;
    }

    upstream messaging_service {
        server messaging-service:3004;
    }

    upstream media_service {
        server media-service:3005;
    }

    # Main server block
    server {
        listen 80;
        server_name localhost;

        # Enable gzip compression
        gzip on;
        gzip_types application/json text/plain application/javascript;

        # CORS headers
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Trace-Id, X-Span-Id, X-Parent-Id" always;
        add_header Access-Control-Allow-Credentials "true" always;

        # Handle preflight requests
        if ($request_method = OPTIONS) {
            return 204;
        }

        # Auth Service routes
        location /api/auth/ {
            proxy_pass http://auth_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Propagate trace headers
            proxy_set_header X-Trace-Id $http_x_trace_id;
            proxy_set_header X-Span-Id $http_x_span_id;
            proxy_set_header X-Parent-Id $http_x_parent_id;
            proxy_set_header traceparent $http_traceparent;
            proxy_set_header tracestate $http_tracestate;
        }

        # User Profile Service routes
        location /api/users/ {
            proxy_pass http://user_profile_service/api/users/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Propagate trace headers
            proxy_set_header X-Trace-Id $http_x_trace_id;
            proxy_set_header X-Span-Id $http_x_span_id;
            proxy_set_header X-Parent-Id $http_x_parent_id;
            proxy_set_header traceparent $http_traceparent;
            proxy_set_header tracestate $http_tracestate;
        }

        # Feed Service routes
        location /api/feed/ {
            proxy_pass http://feed_service/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Propagate trace headers
            proxy_set_header X-Trace-Id $http_x_trace_id;
            proxy_set_header X-Span-Id $http_x_span_id;
            proxy_set_header X-Parent-Id $http_x_parent_id;
            proxy_set_header traceparent $http_traceparent;
            proxy_set_header tracestate $http_tracestate;
        }

        # Media Service routes
        location /api/media/ {
            proxy_pass http://media_service/api/media/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Propagate trace headers
            proxy_set_header X-Trace-Id $http_x_trace_id;
            proxy_set_header X-Span-Id $http_x_span_id;
            proxy_set_header X-Parent-Id $http_x_parent_id;
            proxy_set_header traceparent $http_traceparent;
            proxy_set_header tracestate $http_tracestate;

            # File upload settings
            client_max_body_size 100M;
            proxy_request_buffering off;
        }

        # WebSocket route for messaging
        location /socket.io/ {
            proxy_pass http://messaging_service/socket.io/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Propagate trace headers
            proxy_set_header X-Trace-Id $http_x_trace_id;
            proxy_set_header X-Span-Id $http_x_span_id;
            proxy_set_header X-Parent-Id $http_x_parent_id;
            proxy_set_header traceparent $http_traceparent;
            proxy_set_header tracestate $http_tracestate;

            # WebSocket timeouts
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;
        }

        # Messaging REST API
        location /api/messages/ {
            proxy_pass http://messaging_service/api/messages/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Propagate trace headers
            proxy_set_header X-Trace-Id $http_x_trace_id;
            proxy_set_header X-Span-Id $http_x_span_id;
            proxy_set_header X-Parent-Id $http_x_parent_id;
            proxy_set_header traceparent $http_traceparent;
            proxy_set_header tracestate $http_tracestate;
        }

        # Health check endpoint
        location /health {
            default_type application/json;
            return 200 '{"status":"healthy","service":"nginx-gateway","timestamp":"$time_iso8601"}';
        }

        # Root location
        location / {
            default_type application/json;
            return 200 '{"message":"Social Media API Gateway","version":"1.0.0","endpoints":["/api/auth","/api/users","/api/feed","/api/media","/api/messages","/socket.io"]}';
        }
    }
}
