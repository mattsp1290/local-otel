// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package telemetry represents the exported interface "local:otel/telemetry".
package telemetry

import (
	"go.bytecodealliance.org/cm"
)

// ProviderConfig represents the record "local:otel/telemetry#provider-config".
//
// Minimal types for MVP
//
//	record provider-config {
//		endpoint: string,
//		service-name: string,
//		dev-mode: bool,
//	}
type ProviderConfig struct {
	_           cm.HostLayout `json:"-"`
	Endpoint    string        `json:"endpoint"`
	ServiceName string        `json:"service-name"`
	DevMode     bool          `json:"dev-mode"`
}

// SeverityLevel represents the enum "local:otel/telemetry#severity-level".
//
//	enum severity-level {
//		info,
//		warn,
//		error,
//		debug
//	}
type SeverityLevel uint8

const (
	SeverityLevelInfo SeverityLevel = iota
	SeverityLevelWarn
	SeverityLevelError
	SeverityLevelDebug
)

var _SeverityLevelStrings = [4]string{
	"info",
	"warn",
	"error",
	"debug",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e SeverityLevel) String() string {
	return _SeverityLevelStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e SeverityLevel) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *SeverityLevel) UnmarshalText(text []byte) error {
	return _SeverityLevelUnmarshalCase(e, text)
}

var _SeverityLevelUnmarshalCase = cm.CaseUnmarshaler[SeverityLevel](_SeverityLevelStrings[:])

// LogRecord represents the record "local:otel/telemetry#log-record".
//
//	record log-record {
//		body: string,
//		severity: severity-level,
//	}
type LogRecord struct {
	_        cm.HostLayout `json:"-"`
	Body     string        `json:"body"`
	Severity SeverityLevel `json:"severity"`
}

// TelemetryProvider represents the exported resource "local:otel/telemetry#telemetry-provider".
//
// Resources
//
//	resource telemetry-provider
type TelemetryProvider cm.Resource

// TelemetryProviderResourceNew represents the imported resource-new for resource "telemetry-provider".
//
// Creates a new resource handle.
//
//go:nosplit
func TelemetryProviderResourceNew(rep cm.Rep) (result TelemetryProvider) {
	rep0 := cm.Reinterpret[uint32](rep)
	result0 := wasmimport_TelemetryProviderResourceNew((uint32)(rep0))
	result = cm.Reinterpret[TelemetryProvider]((uint32)(result0))
	return
}

// ResourceRep represents the imported resource-rep for resource "telemetry-provider".
//
// Returns the underlying resource representation.
//
//go:nosplit
func (self TelemetryProvider) ResourceRep() (result cm.Rep) {
	self0 := cm.Reinterpret[uint32](self)
	result0 := wasmimport_TelemetryProviderResourceRep((uint32)(self0))
	result = cm.Reinterpret[cm.Rep]((uint32)(result0))
	return
}

// ResourceDrop represents the imported resource-drop for resource "telemetry-provider".
//
// Drops a resource handle.
//
//go:nosplit
func (self TelemetryProvider) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_TelemetryProviderResourceDrop((uint32)(self0))
	return
}

func init() {
	Exports.TelemetryProvider.Destructor = func(self cm.Rep) {}
}

// Logger represents the exported resource "local:otel/telemetry#logger".
//
//	resource logger
type Logger cm.Resource

// LoggerResourceNew represents the imported resource-new for resource "logger".
//
// Creates a new resource handle.
//
//go:nosplit
func LoggerResourceNew(rep cm.Rep) (result Logger) {
	rep0 := cm.Reinterpret[uint32](rep)
	result0 := wasmimport_LoggerResourceNew((uint32)(rep0))
	result = cm.Reinterpret[Logger]((uint32)(result0))
	return
}

// ResourceRep represents the imported resource-rep for resource "logger".
//
// Returns the underlying resource representation.
//
//go:nosplit
func (self Logger) ResourceRep() (result cm.Rep) {
	self0 := cm.Reinterpret[uint32](self)
	result0 := wasmimport_LoggerResourceRep((uint32)(self0))
	result = cm.Reinterpret[cm.Rep]((uint32)(result0))
	return
}

// ResourceDrop represents the imported resource-drop for resource "logger".
//
// Drops a resource handle.
//
//go:nosplit
func (self Logger) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_LoggerResourceDrop((uint32)(self0))
	return
}

func init() {
	Exports.Logger.Destructor = func(self cm.Rep) {}
}
