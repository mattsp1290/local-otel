version: '3.8'

services:
  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: spacetimedb-otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./docker/configs/otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml
      - ./data:/data
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "13133:13133" # Health check extension
      - "8889:8889"   # Prometheus metrics endpoint
    networks:
      - telemetry-network
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:13133/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # StatsD Server
  statsd:
    image: statsd/statsd:latest
    container_name: spacetimedb-statsd
    volumes:
      - ./docker/configs/statsd/config.js:/usr/src/app/config.js
      - ./data/metrics:/data/metrics
    ports:
      - "8125:8125/udp"
      - "8126:8126"   # Admin interface
    networks:
      - telemetry-network
    restart: unless-stopped
    environment:
      - STATSD_CONFIG_FILE=/usr/src/app/config.js

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: spacetimedb-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - telemetry-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: spacetimedb-grafana
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/configs/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/configs/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    networks:
      - telemetry-network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger (for trace visualization)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: spacetimedb-jaeger
    ports:
      - "16686:16686" # Jaeger UI
      - "14250:14250" # gRPC
    networks:
      - telemetry-network
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Filebeat (for log processing)
  filebeat:
    image: elastic/filebeat:8.11.0
    container_name: spacetimedb-filebeat
    user: root
    volumes:
      - ./docker/configs/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./data:/data
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - telemetry-network
    depends_on:
      - otel-collector
    restart: unless-stopped
    command: filebeat -e -strict.perms=false

networks:
  telemetry-network:
    external: true
    name: spacetimedb-telemetry-network

volumes:
  prometheus-data:
    name: spacetimedb-prometheus-data
  grafana-data:
    name: spacetimedb-grafana-data
