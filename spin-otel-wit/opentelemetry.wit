package opentelemetry:sdk@1.0.0;

interface types {
    /// Error types for telemetry operations
    variant telemetry-error {
        /// Invalid configuration provided
        invalid-config(string),
        /// Export/transmission error
        export-error(string),
        /// Resource limit exceeded
        resource-limit(string),
        /// Invalid data format
        invalid-data(string),
        /// Backend connection error
        connection-error(string),
        /// Context propagation error
        context-error(string),
        /// Sampling decision error
        sampling-error(string),
    }

    /// Metric instrument types (OpenTelemetry standard)
    enum metric-kind {
        counter,
        up-down-counter,
        histogram,
        gauge,
        observable-counter,
        observable-up-down-counter,
        observable-gauge,
    }

    /// Metric temporality
    enum metric-temporality {
        delta,      // Report changes since last export
        cumulative, // Report total since start
    }

    /// Log severity levels (OpenTelemetry standard)
    enum severity-level {
        trace,
        trace2,
        trace3,
        trace4,
        debug,
        debug2,
        debug3,
        debug4,
        info,
        info2,
        info3,
        info4,
        warn,
        warn2,
        warn3,
        warn4,
        error,
        error2,
        error3,
        error4,
        fatal,
        fatal2,
        fatal3,
        fatal4,
    }

    /// Span kind (OpenTelemetry standard)
    enum span-kind {
        internal,
        server,
        client,
        producer,
        consumer,
    }

    /// Span status code
    enum status-code {
        unset,
        ok,
        error,
    }

    /// Export protocol to use
    enum export-protocol {
        otlp-http,
        otlp-grpc,
        statsd,
        prometheus,
        zipkin,
        jaeger,
        /// Development mode - logs to stdout
        debug-stdout,
    }

    /// Sampling strategy
    enum sampling-strategy {
        /// Always sample
        always-on,
        /// Never sample
        always-off,
        /// Random probability sampling
        probability(f64),
        /// Sample based on parent span decision
        parent-based,
    }

    /// Key-value attribute
    record attribute {
        key: string,
        value: attribute-value,
    }

    /// Attribute value types
    variant attribute-value {
        string-value(string),
        bool-value(bool),
        s64-value(s64),
        f64-value(f64),
        string-array(list<string>),
        bool-array(list<bool>),
        s64-array(list<s64>),
        f64-array(list<f64>),
    }

    /// Resource represents the entity producing telemetry
    record resource {
        /// Resource attributes following semantic conventions
        attributes: list<attribute>,
        /// Schema URL for attribute definitions
        schema-url: option<string>,
    }

    /// Configuration for the telemetry provider
    record provider-config {
        /// Endpoint for sending telemetry (e.g., "http://localhost:4318")
        endpoint: string,
        /// Export protocol to use
        protocol: export-protocol,
        /// Service name (maps to service.name)
        service-name: string,
        /// Service version (maps to service.version)
        service-version: option<string>,
        /// Deployment environment (maps to deployment.environment)
        environment: option<string>,
        /// Additional resource attributes
        resource-attributes: list<attribute>,
        /// Default tags to apply to all telemetry
        default-tags: list<attribute>,
        /// Headers for authentication (e.g., API keys)
        headers: list<tuple<string, string>>,
        /// Enable compression
        compression: bool,
        /// Timeout for exports in milliseconds
        timeout-ms: u32,
        /// Batch size for exports
        batch-size: u32,
        /// Maximum queue size
        max-queue-size: u32,
        /// Sampling strategy
        sampling: sampling-strategy,
        /// Enable development mode (verbose output)
        dev-mode: bool,
    }

    /// Metric data point
    record metric-point {
        /// Metric name
        name: string,
        /// Metric description
        description: option<string>,
        /// Unit of measurement
        unit: option<string>,
        /// Metric instrument kind
        kind: metric-kind,
        /// Numeric value
        value: metric-value,
        /// Attributes for this data point
        attributes: list<attribute>,
        /// Timestamp in nanoseconds since Unix epoch
        timestamp-nanos: option<u64>,
        /// Temporality of the metric
        temporality: metric-temporality,
        /// Exemplar data linking to traces
        exemplar: option<exemplar>,
    }

    /// Exemplar linking metrics to traces
    record exemplar {
        /// Value of the exemplar point
        value: f64,
        /// Timestamp of the exemplar
        timestamp-nanos: u64,
        /// Trace context if available
        trace-context: option<trace-context>,
        /// Additional attributes
        attributes: list<attribute>,
    }

    /// Metric value types
    variant metric-value {
        s64-value(s64),
        f64-value(f64),
        histogram-value(histogram-data),
    }

    /// Histogram data with percentile support
    record histogram-data {
        count: u64,
        sum: f64,
        min: option<f64>,
        max: option<f64>,
        /// Bucket counts for histogram
        bucket-counts: list<u64>,
        /// Explicit bucket boundaries
        explicit-bounds: list<f64>,
        /// Pre-calculated percentiles
        percentiles: list<percentile>,
    }

    /// Percentile data point
    record percentile {
        /// Percentile (e.g., 50.0, 95.0, 99.0)
        percentile: f64,
        /// Value at this percentile
        value: f64,
    }

    /// Pre-aggregated metric for high-frequency metrics
    record aggregated-metric {
        /// Base metric information
        metric: metric-point,
        /// Number of measurements aggregated
        count: u64,
        /// Time window for aggregation in milliseconds
        window-ms: u64,
    }

    /// Log record
    record log-record {
        /// Log body/message
        body: string,
        /// Severity level
        severity: severity-level,
        /// Severity text (optional custom text)
        severity-text: option<string>,
        /// Log attributes
        attributes: list<attribute>,
        /// Trace context if correlated with a trace
        trace-context: option<trace-context>,
        /// Correlation ID for non-traced operations
        correlation-id: option<string>,
        /// Request ID for request tracking
        request-id: option<string>,
        /// Session ID for session tracking
        session-id: option<string>,
        /// Timestamp in nanoseconds since Unix epoch
        timestamp-nanos: option<u64>,
    }

    /// Error information for enhanced error tracking
    record error-info {
        /// Raw error message
        message: string,
        /// Error type/class if available
        error-type: option<string>,
        /// Stack trace if available
        stack-trace: option<string>,
        /// Computed fingerprint for grouping similar errors
        fingerprint: option<string>,
        /// Whether this error triggered a circuit breaker
        circuit-breaker-triggered: bool,
    }

    /// Span data for creating a new span
    record span-spec {
        /// Span name (operation name)
        name: string,
        /// Span kind
        kind: span-kind,
        /// Parent context (for distributed tracing)
        parent: option<trace-context>,
        /// Span attributes
        attributes: list<attribute>,
        /// Links to other spans
        links: list<span-link>,
        /// Start time in nanoseconds since Unix epoch
        start-time-nanos: option<u64>,
    }

    /// Link to another span
    record span-link {
        /// Trace context of the linked span
        context: trace-context,
        /// Link attributes
        attributes: list<attribute>,
    }

    /// Span event
    record span-event {
        /// Event name
        name: string,
        /// Event attributes
        attributes: list<attribute>,
        /// Timestamp in nanoseconds since Unix epoch
        timestamp-nanos: option<u64>,
        /// Error information if this is an error event
        error-info: option<error-info>,
    }

    /// W3C Trace Context for distributed tracing
    record trace-context {
        /// Trace ID (32 hex chars / 128 bits)
        trace-id: string,
        /// Span ID (16 hex chars / 64 bits)
        span-id: string,
        /// Trace flags (8 bits)
        trace-flags: u8,
        /// Trace state (vendor-specific info)
        trace-state: option<string>,
    }

    /// Baggage for cross-cutting concerns
    record baggage {
        /// Key-value pairs
        entries: list<tuple<string, string>>,
    }

    /// Resource utilization metrics
    record resource-metrics {
        /// CPU usage percentage (0-100)
        cpu-percent: option<f64>,
        /// Memory usage in bytes
        memory-bytes: option<u64>,
        /// Memory usage percentage (0-100)
        memory-percent: option<f64>,
        /// Number of active goroutines/threads
        goroutines: option<u32>,
        /// Heap allocation in bytes
        heap-alloc-bytes: option<u64>,
        /// GC pause duration in nanoseconds
        gc-pause-ns: option<u64>,
    }

    /// Health check status
    record health-status {
        /// Overall health status
        healthy: bool,
        /// Status message
        message: string,
        /// Component-specific health checks
        components: list<component-health>,
        /// Timestamp of health check
        timestamp-nanos: u64,
    }

    /// Component health information
    record component-health {
        /// Component name
        name: string,
        /// Health status
        healthy: bool,
        /// Optional message
        message: option<string>,
    }

    /// Circuit breaker configuration
    record circuit-breaker-config {
        /// Error threshold percentage (0-100)
        error-threshold-percent: f64,
        /// Time window for error calculation in milliseconds
        window-ms: u64,
        /// Minimum number of requests before evaluation
        min-requests: u32,
        /// Cool-down period in milliseconds
        cooldown-ms: u64,
    }

    /// RED metrics (Rate, Errors, Duration)
    record red-metrics {
        /// Request rate per second
        rate: f64,
        /// Error rate (0-1)
        error-rate: f64,
        /// Duration percentiles in milliseconds
        duration-p50: f64,
        duration-p95: f64,
        duration-p99: f64,
    }

    /// USE metrics (Utilization, Saturation, Errors)
    record use-metrics {
        /// Resource utilization (0-1)
        utilization: f64,
        /// Resource saturation (0-1)
        saturation: f64,
        /// Error count
        errors: u64,
        /// Resource name
        resource-name: string,
    }

    /// Golden signals
    record golden-signals {
        /// Traffic (requests per second)
        traffic: f64,
        /// Error rate (0-1)
        error-rate: f64,
        /// Latency percentiles in milliseconds
        latency-p50: f64,
        latency-p95: f64,
        latency-p99: f64,
        /// Saturation (0-1)
        saturation: f64,
    }

    /// SLO burn rate
    record slo-burn-rate {
        /// SLO name
        slo-name: string,
        /// Current burn rate (1.0 = burning exactly at threshold)
        burn-rate: f64,
        /// Time window in minutes
        window-minutes: u32,
        /// Error budget remaining (0-1)
        budget-remaining: f64,
    }
}

interface telemetry {
    use types.{
        telemetry-error, provider-config, metric-point, log-record,
        span-spec, trace-context, span-event, attribute, status-code,
        baggage, error-info, aggregated-metric, resource-metrics,
        health-status, circuit-breaker-config, red-metrics,
        use-metrics, golden-signals, slo-burn-rate
    };

    /// The main telemetry provider resource
    resource telemetry-provider {
        /// Create a new telemetry provider with configuration
        constructor(config: provider-config);

        /// Create a tracer for a specific component
        create-tracer: func(name: string, version: option<string>) -> result<tracer, telemetry-error>;

        /// Create a meter for metrics
        create-meter: func(name: string, version: option<string>) -> result<meter, telemetry-error>;

        /// Create a logger
        create-logger: func(name: string, version: option<string>) -> result<logger, telemetry-error>;

        /// Get resource utilization metrics
        get-resource-metrics: func() -> resource-metrics;

        /// Perform health check
        health-check: func() -> health-status;

        /// Force flush all pending telemetry
        force-flush: func() -> result<_, telemetry-error>;

        /// Shutdown the provider and release resources
        shutdown: func() -> result<_, telemetry-error>;
    }

    /// Tracer for creating and managing spans
    resource tracer {
        /// Start a new span
        start-span: func(spec: span-spec) -> result<span, telemetry-error>;

        /// Extract trace context from carrier (for incoming requests)
        extract-context: func(carrier: list<tuple<string, string>>) -> option<trace-context>;

        /// Inject trace context into carrier (for outgoing requests)
        inject-context: func(context: trace-context) -> list<tuple<string, string>>;

        /// Generate a correlation ID for non-traced operations
        generate-correlation-id: func() -> string;

        /// Create a panic handler that reports panics as error spans
        create-panic-handler: func() -> result<panic-handler, telemetry-error>;
    }

    /// Active span resource
    resource span {
        /// Get the span's trace context
        context: func() -> trace-context;

        /// Set span attributes
        set-attributes: func(attributes: list<attribute>) -> result<_, telemetry-error>;

        /// Add an event to the span
        add-event: func(event: span-event) -> result<_, telemetry-error>;

        /// Record an error with enhanced tracking
        record-error: func(error: error-info) -> result<_, telemetry-error>;

        /// Set the span status
        set-status: func(code: status-code, description: option<string>) -> result<_, telemetry-error>;

        /// Update the span name
        update-name: func(name: string) -> result<_, telemetry-error>;

        /// End the span with optional end time
        end: func(end-time-nanos: option<u64>) -> result<_, telemetry-error>;
    }

    /// Panic handler for automatic error tracking
    resource panic-handler {
        /// Handle a panic and create error telemetry
        handle-panic: func(message: string, stack-trace: option<string>) -> result<_, telemetry-error>;
    }

    /// Meter for metrics operations
    resource meter {
        /// Record metric measurements
        record-metrics: func(metrics: list<metric-point>) -> result<_, telemetry-error>;

        /// Record pre-aggregated metrics for high-frequency operations
        record-aggregated: func(metrics: list<aggregated-metric>) -> result<_, telemetry-error>;

        /// Create a callback for observable instruments
        create-observable-callback: func(
            metric-names: list<string>,
            callback-id: string
        ) -> result<_, telemetry-error>;

        /// Record RED metrics
        record-red-metrics: func(endpoint: string, metrics: red-metrics) -> result<_, telemetry-error>;

        /// Record USE metrics
        record-use-metrics: func(metrics: use-metrics) -> result<_, telemetry-error>;

        /// Record golden signals
        record-golden-signals: func(service: string, signals: golden-signals) -> result<_, telemetry-error>;

        /// Record SLO burn rate
        record-slo-burn-rate: func(burn-rate: slo-burn-rate) -> result<_, telemetry-error>;

        /// Create a circuit breaker
        create-circuit-breaker: func(
            name: string,
            config: circuit-breaker-config
        ) -> result<circuit-breaker, telemetry-error>;
    }

    /// Circuit breaker for error rate control
    resource circuit-breaker {
        /// Check if the circuit is open
        is-open: func() -> bool;

        /// Record a success
        record-success: func() -> result<_, telemetry-error>;

        /// Record an error
        record-error: func() -> result<_, telemetry-error>;

        /// Get current error rate
        error-rate: func() -> f64;

        /// Reset the circuit breaker
        reset: func() -> result<_, telemetry-error>;
    }

    /// Logger for structured logging
    resource logger {
        /// Emit a log record
        emit: func(record: log-record) -> result<_, telemetry-error>;

        /// Emit multiple log records
        emit-batch: func(records: list<log-record>) -> result<_, telemetry-error>;

        /// Create a logger with trace context automatically injected
        with-trace-context: func(context: trace-context) -> result<logger, telemetry-error>;

        /// Create a logger with correlation ID
        with-correlation-id: func(correlation-id: string) -> result<logger, telemetry-error>;

        /// Create a logger with request ID
        with-request-id: func(request-id: string) -> result<logger, telemetry-error>;

        /// Create a logger with session ID
        with-session-id: func(session-id: string) -> result<logger, telemetry-error>;
    }

    /// Context propagation utilities
    resource context-propagator {
        /// Get current baggage
        get-baggage: func() -> baggage;

        /// Set baggage
        set-baggage: func(baggage: baggage);

        /// Get current trace context
        get-trace-context: func() -> option<trace-context>;

        /// Set trace context
        set-trace-context: func(context: trace-context);

        /// Get current correlation ID
        get-correlation-id: func() -> option<string>;

        /// Set correlation ID
        set-correlation-id: func(id: string);

        /// Get current request ID
        get-request-id: func() -> option<string>;

        /// Set request ID
        set-request-id: func(id: string);

        /// Get current session ID
        get-session-id: func() -> option<string>;

        /// Set session ID
        set-session-id: func(id: string);
    }

    /// Testing utilities
    resource test-helper {
        /// Create a mock telemetry provider for testing
        create-mock-provider: func() -> result<telemetry-provider, telemetry-error>;

        /// Get all recorded spans
        get-recorded-spans: func() -> list<span-spec>;

        /// Get all recorded metrics
        get-recorded-metrics: func() -> list<metric-point>;

        /// Get all recorded logs
        get-recorded-logs: func() -> list<log-record>;

        /// Clear all recorded telemetry
        clear-recorded: func();

        /// Verify telemetry was recorded matching criteria
        verify-telemetry: func(
            span-name: option<string>,
            metric-name: option<string>,
            log-pattern: option<string>
        ) -> bool;
    }
}

/// World that exports OpenTelemetry SDK functionality
world opentelemetry-world {
    export telemetry;
    
    /// Import the test helper for testing
    import telemetry-test-helper: func() -> test-helper;
}
